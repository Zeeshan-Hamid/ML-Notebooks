# -*- coding: utf-8 -*-
"""8- Model_selection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vy87UiLyAYpVs0_msZJJvNu0z2XVyLmk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.metrics import r2_score

dataset = pd.read_csv("Data.csv")
X = dataset.iloc[:, :-1].values
Y = dataset.iloc[:, -1].values
print(X)
print(Y)

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

print(X_test)

"""## Multiple Linear Regression"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression().fit(X_train, Y_train)

y_pred = regressor.predict(X_test)
np.set_printoptions(precision=2)
print(np.concatenate((y_pred.reshape(len(y_pred),1), Y_test.reshape(len(Y_test),1)),1))

r2_score(Y_test, y_pred)

"""## Polynomial Regression"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
poly_reg = PolynomialFeatures(degree = 4)
X_poly = poly_reg.fit_transform(X_train)
regressor = LinearRegression()
regressor.fit(X_poly, Y_train)

poly_pred = regressor.predict(poly_reg.transform(X_test))

r2_score(Y_test, poly_pred)

"""## Support vector regression

###### Feature Scaling (Only for SVR)
"""

Y = Y.reshape(len(Y), 1)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
sc_Y = StandardScaler()
X_train = sc_X.fit_transform(X_train)
Y_train = sc_Y.fit_transform(Y_train)

from sklearn.svm import SVR
regressor = SVR(kernel = 'rbf')
regressor.fit(X_train, Y_train)

svr_pred = sc_Y.inverse_transform(regressor.predict(sc_X.transform(X_test)).reshape(-1, 1))

"""##### R2 score of SVR"""

r2_score(Y_test, svr_pred)

"""## Decision Tree Regression"""

Y = Y.flatten()
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)
print(Y)

from sklearn.tree import DecisionTreeRegressor
regressor = DecisionTreeRegressor(random_state=0)
regressor.fit(X_train, Y_train)

dt_pred = regressor.predict(X_test)

"""##### R2 score of decision tree"""

r2_score(Y_test, dt_pred)

"""## Random Forest regression"""

from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor(n_estimators= 10, random_state=0)
regressor.fit(X_train, Y_train)
rf_pred = regressor.predict(X_test)

"""##### R2 score of Random Forest regression"""

r2_score(Y_test, rf_pred)